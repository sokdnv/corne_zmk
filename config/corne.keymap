/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_er {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <3 4>;
        };

        combo_ui {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <7 8>;
        };

        combo_df {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <15 16>;
        };

        combo_jk {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <19 20>;
        };

        combo_cv {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <27 28>;
        };

        combo_m {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <31 32>;
        };

        combo_caps {
            bindings = <&kp LA(CAPS)>;
            key-positions = <2 9>;
        };

        lang {
            bindings = <&lt 2 LG(SPACE)>;
            key-positions = <37 40>;
        };

        shift_enter {
            bindings = <&kp LS(ENTER)>;
            key-positions = <38 39>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q  &kp W  &kp E         &kp R            &kp T        &kp Y               &kp U            &kp I      &kp O    &kp P          &none
&none  &kp A  &kp S  &kp D         &kp F            &kp G        &kp H               &kp J            &kp K      &kp L    &kp SEMICOLON  &none
&none  &kp Z  &kp X  &kp C         &kp V            &kp B        &kp N               &kp M            &kp COMMA  &kp DOT  &kp SLASH      &none
                     &mt LALT TAB  &mt LGUI ESCAPE  &kp SPACE    &mt RET LEFT_SHIFT  &lt 1 BACKSPACE  &kp RCTRL
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3       &kp NUMBER_4  &kp N5            &kp NUMBER_6  &kp N7        &kp N8         &kp N9         &kp N0     &none
&none  &kp EXCLAMATION  &kp AT_SIGN   &kp DOUBLE_QUOTES  &kp SQT       &kp UNDERSCORE    &kp PLUS      &kp QUESTION  &kp ASTERISK   &kp MINUS      &kp EQUAL  &none
&none  &kp TILDE        &kp GRAVE     &kp HASH           &kp DOLLAR    &kp PERCENT       &trans        &kp CARET     &kp AMPERSAND  &kp BACKSLASH  &kp PIPE   &none
                                      &trans             &trans        &trans            &trans        &trans        &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp C_BRI_DEC         &kp C_BRI_UP          &kp C_VOL_DN          &kp C_VOL_UP          &trans    &trans    &kp K_PREV      &kp K_PLAY_PAUSE  &kp K_NEXT       &trans  &trans
&trans  &kp LA(NUMBER_1)      &kp LA(NUMBER_2)      &kp LA(NUMBER_3)      &kp LA(NUMBER_4)      &trans    &kp LEFT  &kp DOWN_ARROW  &kp UP_ARROW      &kp RIGHT_ARROW  &trans  &trans
&trans  &kp LS(LA(NUMBER_1))  &kp LS(LA(NUMBER_2))  &kp LS(LA(NUMBER_3))  &kp LS(LA(NUMBER_4))  &trans    &trans    &trans          &trans            &trans           &trans  &trans
                                                    &bootloader           &trans                &trans    &trans    &trans          &trans
            >;
        };
    };
};
